// <auto-generated />
using System;
using CldStatsData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CldStatsData.Migrations
{
    [DbContext(typeof(CldStatsDbContext))]
    [Migration("20220426144255_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CldStatsData.CldStatsModels.Acivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("PipUserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("QuarterId")
                        .HasColumnType("int");

                    b.Property<int?>("VolunteerAmount")
                        .HasColumnType("int");

                    b.Property<float?>("VolunteerHours")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("PipUserId");

                    b.HasIndex("QuarterId");

                    b.ToTable("Acivity", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.ActitityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("ActitityType", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.ActivityCluster", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "ClusterId");

                    b.HasIndex("ClusterId");

                    b.ToTable("Activity_Cluster", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.ActivityTypeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypeStatus", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PipUserStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("PipUserStatusId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Centre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("Centres");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.CentreFootfall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<int>("QuarterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.HasIndex("QuarterId");

                    b.ToTable("CentreFootfall", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Cluster", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cluster", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.CurrerntQuarter", b =>
                {
                    b.Property<int>("QuarterId")
                        .HasColumnType("int");

                    b.HasKey("QuarterId");

                    b.ToTable("CurrerntQuarter", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.PipUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AuthId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PipUserStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PipUser", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.PipUserStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("PipUserStatus", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Priority", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Quarter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Quarter", (string)null);
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Acivity", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.ActitityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Acivity_ActitityType");

                    b.HasOne("CldStatsData.CldStatsModels.AspNetUser", "PipUser")
                        .WithMany("Acivities")
                        .HasForeignKey("PipUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Acivity_AspNetUsers");

                    b.HasOne("CldStatsData.CldStatsModels.Quarter", "Quarter")
                        .WithMany("Acivities")
                        .HasForeignKey("QuarterId")
                        .IsRequired()
                        .HasConstraintName("FK_Acivity_Quarter");

                    b.Navigation("ActivityType");

                    b.Navigation("PipUser");

                    b.Navigation("Quarter");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.ActitityType", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.Priority", "Priority")
                        .WithMany("ActitityTypes")
                        .HasForeignKey("PriorityId")
                        .IsRequired()
                        .HasConstraintName("FK_ActitityType_Priority");

                    b.HasOne("CldStatsData.CldStatsModels.ActivityTypeStatus", "Status")
                        .WithMany("ActitityTypes")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ActitityType_ActivityTypeStatus");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.ActivityCluster", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.Acivity", "Activity")
                        .WithMany("ActivityClusters")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Activity_Cluster_Acivity");

                    b.HasOne("CldStatsData.CldStatsModels.Cluster", "Cluster")
                        .WithMany("ActivityClusters")
                        .HasForeignKey("ClusterId")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_Cluster_Cluster");

                    b.Navigation("Activity");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUser", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.PipUserStatus", "PipUserStatus")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("PipUserStatusId")
                        .HasConstraintName("FK_AspNetUsers_PipUserStatus");

                    b.Navigation("PipUserStatus");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUserClaim", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUserLogin", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUserRole", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                    b.HasOne("CldStatsData.CldStatsModels.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Centre", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.Cluster", "Cluster")
                        .WithMany("Centres")
                        .HasForeignKey("ClusterId")
                        .IsRequired()
                        .HasConstraintName("FK_Centres_Cluster");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.CentreFootfall", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.Centre", "Centre")
                        .WithMany("CentreFootfalls")
                        .HasForeignKey("CentreId")
                        .IsRequired()
                        .HasConstraintName("FK_CentreFootfall_Centres");

                    b.HasOne("CldStatsData.CldStatsModels.Quarter", "Quarter")
                        .WithMany("CentreFootfalls")
                        .HasForeignKey("QuarterId")
                        .IsRequired()
                        .HasConstraintName("FK_CentreFootfall_Quarter");

                    b.Navigation("Centre");

                    b.Navigation("Quarter");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.CurrerntQuarter", b =>
                {
                    b.HasOne("CldStatsData.CldStatsModels.Quarter", "Quarter")
                        .WithOne("CurrerntQuarter")
                        .HasForeignKey("CldStatsData.CldStatsModels.CurrerntQuarter", "QuarterId")
                        .IsRequired()
                        .HasConstraintName("FK_CurrerntQuarter_Quarter");

                    b.Navigation("Quarter");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Acivity", b =>
                {
                    b.Navigation("ActivityClusters");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.ActitityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.ActivityTypeStatus", b =>
                {
                    b.Navigation("ActitityTypes");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetRole", b =>
                {
                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.AspNetUser", b =>
                {
                    b.Navigation("Acivities");

                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Centre", b =>
                {
                    b.Navigation("CentreFootfalls");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Cluster", b =>
                {
                    b.Navigation("ActivityClusters");

                    b.Navigation("Centres");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.PipUserStatus", b =>
                {
                    b.Navigation("AspNetUsers");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Priority", b =>
                {
                    b.Navigation("ActitityTypes");
                });

            modelBuilder.Entity("CldStatsData.CldStatsModels.Quarter", b =>
                {
                    b.Navigation("Acivities");

                    b.Navigation("CentreFootfalls");

                    b.Navigation("CurrerntQuarter");
                });
#pragma warning restore 612, 618
        }
    }
}
